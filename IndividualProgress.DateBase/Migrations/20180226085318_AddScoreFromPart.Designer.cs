// <auto-generated />
using IndividualProgress.DateBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IndividualProgress.DateBase.Migrations
{
    [DbContext(typeof(IndividualsContext))]
    [Migration("20180226085318_AddScoreFromPart")]
    partial class AddScoreFromPart
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IndividualProgress.DateBase.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("SphereId");

                    b.HasKey("Id");

                    b.HasIndex("SphereId");

                    b.ToTable("Direction");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DirectionId");

                    b.Property<int?>("LevelId");

                    b.Property<int?>("LocationId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("LevelId");

                    b.HasIndex("LocationId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Level");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adress")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventId");

                    b.Property<int?>("Place");

                    b.Property<int?>("Score");

                    b.Property<int>("StudentId");

                    b.Property<int?>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Part");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Sphere", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sphere");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<int?>("GroupId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Direction", b =>
                {
                    b.HasOne("IndividualProgress.DateBase.Sphere", "Sphere")
                        .WithMany("Direction")
                        .HasForeignKey("SphereId")
                        .HasConstraintName("FK_Direction_Sphere");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Event", b =>
                {
                    b.HasOne("IndividualProgress.DateBase.Direction", "Direction")
                        .WithMany("Event")
                        .HasForeignKey("DirectionId")
                        .HasConstraintName("FK_Event_Direction");

                    b.HasOne("IndividualProgress.DateBase.Level", "Level")
                        .WithMany("Event")
                        .HasForeignKey("LevelId")
                        .HasConstraintName("FK_Event_Level");

                    b.HasOne("IndividualProgress.DateBase.Location", "Location")
                        .WithMany("Event")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Event_Location");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Part", b =>
                {
                    b.HasOne("IndividualProgress.DateBase.Event", "Event")
                        .WithMany("Part")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_Part_Event");

                    b.HasOne("IndividualProgress.DateBase.Student", "Student")
                        .WithMany("Part")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Part_Student");

                    b.HasOne("IndividualProgress.DateBase.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("IndividualProgress.DateBase.Student", b =>
                {
                    b.HasOne("IndividualProgress.DateBase.Group", "Group")
                        .WithMany("Student")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Student_Group");
                });
#pragma warning restore 612, 618
        }
    }
}
